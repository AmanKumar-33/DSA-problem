#include<bits/stdc++.h>
// class Solution {
// public:
//     double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
//         int i;
//         int m = nums1.size();
//         int n = nums2.size();
//         priority_queue<int,vector<int>,greater<int>>pq;
//         for(int i =0;i<n;i++){
//             pq.push(nums1[i]);
//         }
//         for(int i =0;i<n;i++){
//             pq.push(nums2[i]);
//         }
//         int check = m+n;
//         int count = -1;
//         double mid1,mid2;
//         while(!pq.empty()){
//             count++;
//             if(check % 2 !=0&&count == check/2)
//             {
//                double ans =pq.top();
//                return ans;
//             }
//             if(check %2 == 0 && count == (check/2)-1)
//             {
            
//                double mid1 = pq.top();
//             }
//             if(check %2 == 0 && count == (check/2))
//             {
//                double mid2 = pq.top();
//                 double ans = (mid1 + mid2)/2;
//                return ans;
        


//             }   
//             pq.pop();
//         }
//         return 0;

        
//     }
      
// };
// class Solution {
// public:
//     double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
//         int i;
//         int m = nums1.size();
//         int n = nums2.size();
//         int low =0;
//         int high =m;
//         if(n<m){
//             return findMedianSortedArrays(nums2,nums1);
//         }
//         while(low <=high)
//         {
//             int cut1 = (low+high)<<1;
//             int cut2 = (m+n+1)/2-cut1;

//         int left1= cut1 == 0?INT_MIN:nums1[cut1-1];
//         int left2 = cut2 == 0?INT_MIN:nums2[cut2-1];
//         int  right1= cut1 == n?INT_MAX:nums1[cut1-1];
//         int right2 = cut2 == m?INT_MAX:nums2[cut2-1];
//         if(left1 <= right2 && left2 <=right1 )
//         {
//             if((n+m)%2 == 0)
//             {
//                 return max(left1,left2)+ ((right1+right2)/2.0);
//             }
//             else{
//                 return (max(left1,left2));
//             }
//         }
//         else if(left1 > right2){
//             high = cut1 -1;
//         }
//         else{
//             low = cut1-1;
//         }

        
//     }
//     return 0.0;
//     }
      
// };
double findMedianArray(Vector<int>& nums1,vector<int>&nums2){
    int n1 = nums1.size();
    int n2 = nums2.size();
    int low =0;
    int high = n1;
    while(low <= high){
        int cut1 = (low+high)>>1;
        int cut2 = (n1+n2+1)/2 - cut1;
        int left1 = cut1 == 0?INT_MIN:nums1[cut1-1];
        int left2 = cut2 == 0?INT_MIN:nums2[cut2-1];
        int right1 = cut1 == n1?INT_MAX:nums1[cut1];
        int right2 = cut2 == n2?INT_MAX:nums2[cut2];
        if(left1 <= right2 && left2 <= right1){
            if((n1+n2)%2 == 0){
                return (max(left1,left2)+min(right1,right2))/2.0;
            }
            else{
                return max(left1,left2);
            }
        }
        else if(left1 > right2){
            high = cut1-1;
        }
        else{
            low = cut1+1;
        }
    }
}